generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  VOLUNTEER
  ORGANIZATION
  ADMIN
}

model User {
  id                  String                @id 
  email               String?               @unique
  name                String?
  emailVerified       Boolean
  image               String?
  role                UserRole              @default(VOLUNTEER)
  isVerified          Boolean               @default(false)
  verificationDocId   String?
  dateOfBirth         DateTime?
  presentAddress      String?
  permanentAddress    String?
  city                String?
  postalCode          String?
  country             String?
  createdAt           DateTime
  updatedAt           DateTime
  sessions            Session[]
  accounts            Account[]
  verificationDoc     VerificationDocument? @relation(fields: [verificationDocId], references: [id])
  verificationRequests VerificationRequest[]
  eventsCreated       Event[]               @relation("EventOrganizer")
  eventRegistrations  EventRegistration[]   

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model VerificationDocument {
  id          String   @id @default(uuid())
  documentUrl String
  uploadedAt  DateTime @default(now())
  users       User[]
}

model VerificationRequest {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      String   @default("PENDING") 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewedBy  String?  
  notes       String?
}

model Event {
  id              String              @id @default(uuid())
  title           String
  description     String
  startTime       DateTime
  endTime         DateTime
  address         String
  logo            String?  
  primaryColor    String?  
  secondaryColor  String?  
  maxSpots        Int                 @default(0)    
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  organizerId     String   
  organizer       User                @relation("EventOrganizer", fields: [organizerId], references: [id])
  registrations   EventRegistration[] 

  @@map("event")  
}

model EventRegistration {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, userId]) 
  @@map("event_registration")
}